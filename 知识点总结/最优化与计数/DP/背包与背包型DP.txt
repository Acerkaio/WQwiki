定义：
	狭义的背包问题是常见的选物品
	广义的背包问题指一种特殊DP状态设计：
		DP状态的一维表示选择的量
		而题目对量有限制
		例如，常见的量有：
			已经选了的东西个数
			已经进行操作的代价
常见背包类型：
	01背包
	完全背包
	多重背包
	树上背包
常见处理方法：
	通用技巧：
		一些剪枝：
			1.将一定不选的物品直接去掉（价值关于体积必须递增）
			2.将DP状态设成“恰好”，用vector存状态，将不优的状态去掉（dp值关于体积必须递增）
				绝大多数题目出题人都不会卡（卡不掉）这个做法，可以放心大胆使用
			3.将体积相同的合并处理，可能是直接删掉，或是排序处理（因为转移其实只与体积有关）
		二进制分组：
			可以将物品数量降为log个
			处理多重背包或完全背包
		折半搜索：
			处理n在30~40左右的问题
		合并和插入的转化（可以优化状态或转移）：
			插入转合并（较常用）：
				条件：合并复杂度更优
				处理：结合分治/倍增实现
				例子：
					倍增FFT
					分治+闵可夫斯基和
			合并转插入：
				条件：
					插入复杂度更优
					特别注意插入顺序的影响
				处理：可能结合启发式实现
				例子：树上连通块DP的启发式做法
	性价比背包：
		将物品按价值与体积的比排序后选择
		可以保证总体积为某个前缀和时，其价值和最优
	处理存在性背包：
		存在性完全背包（同余最短路）：
			实现：转圈实现
			复杂度：最小的物品体积*体积种数
		存在性多重背包（bitset）：
			复杂度：本质不同的转移数*背包容量
		进制分解的结论（特殊存在性01背包）：
			在按体积从小到大排序后，满足 任何一个物品的体积小于等于其前面物品的体积和减1
			那么在上下界之间的任何一个容量，都能被用类似进制分解的方法构造出解
	
			例题：ARC LIS on tree 2
	处理计数背包：
		背包合并：
			多项式卷积fft/ntt
		可删除背包（回退背包）：
			适用范围：类似高维前缀和/01背包方案数那样的数值DP转移（最优化不行）
			经典例题：
				消失之物：带回退的01背包
				solution：略
				
				给定数组a[1~n]，每次询问给定l,r，问a[l~r]中选k个数的乘积期望是多少
					两个方案不同当且仅当k个数的下标组成的集合不同
					n,q<=1000
				solution：莫队加上回退背包即可
	处理最优化背包：
		体积小的多重背包处理（普通増函数和凸包合并）:
			按体积分组以后，在同一体积内就是1D/1D问题
			可以发现按照总体积对当前体积的余数，转移可以分成若干类，每类互不干扰
			然后观察价值函数，有比较明显的凸性，所以直接猜一个决策单调性
			注意，DP数组是没有凸性的
			例题：Jewel Thief
		带凸性的背包合并（凸包合并）：
			闵可夫斯基和
		带凸性的背包求恰k个物品：
			wqs二分
		体积小的多重背包问题通法(复杂度和背包容量无关）
			贪心+小范围dp
			适用范围：任意背包，m,vi,wi 可负。
			具体做法：
				先将体积为负的默认选上，然后将其体积和价值取反，那么体积都是正的了
				然后先用性价比背包尽量接近到限制容量
				接下来我们只需要删一些已经选了的物品并加上一些未选的物品
				用多重背包实现即可，背包容量为w^2，其中w是最大的体积
			对背包容量的证明：
				首先，尽量接近后的体积与限制容量的差<w
				而且，最终的背包体积与限制容量的差<w
				中间的调整过程一定存在一种方案，使得当前体积一直与限制容量的差<w
				而任何一种总体积都只会在调整过程中被遍历最多一次
				（依据性价比背包的最优性，否则当前调整作用上去以后就更优了）
				所以最多选w个加，w个减，背包容量为w^2
			例题：Uplifting Excursion
		体积小但容量较大的完全背包处理：（不是通解，对容量下界有限制）
			P9140 [THUPC 2023 初赛] 背包 
			通解：
				和普通完全背包拼一起可以实现总复杂度：O(n*maxv^2)
	
可能用到的结论：
	总体积一定时，不同的体积数是根号的
		proof:利用根号分治可证
		这提示我们，有容量限制（和限制）时一般已经满足了根号分治的前提条件，难点只是在设计算法
	物品体积正负都有时，总体积恰好是sum，绝对值最大的物品体积为maxv
		则存在一种调整物品放置顺序的办法，使任何时候的体积都在[l,r]中，其中l,r满足r-l+1>=2*mxv,且0,sum均在[l,r]中 
		proof:对于当前的体积nw，若下一个体积使nw越过范围，不妨假设nw超过下界l(nw-maxv<l)，此时其必然存在一个正的体积，用那个物品即可，nw->nw+maxv<=r
		
		特别注意这不能直接由朴素的背包DP实现，因为这要求了某种顺序
	物品体积有正负，物品价值均为正时，最优解不会重复经过同一个总体积
		特别的，如果是多重背包，可以将负价值先钦定必选从而转成正价值
		proof:显然
		注意，同余最短路、最优化多重背包的做法都用到了这个结论的变体
	物品体积有正负，最终体积和为恰0的01背包：
		可以在过程中取背包最大容量为
			[-maxv*sqrt(maxv),maxv*sqrt(maxv)]


