import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.e7363dcb.js";const D=JSON.parse('{"title":"kruskal.cpp","description":"","frontmatter":{},"headers":[],"relativePath":"Graph/kruskal.cpp.md","filePath":"Graph/kruskal.cpp.md","lastUpdated":1738592860000}'),l={name:"Graph/kruskal.cpp.md"},o=p(`<h1 id="kruskal-cpp" tabindex="-1">kruskal.cpp <a class="header-anchor" href="#kruskal-cpp" aria-label="Permalink to &quot;kruskal.cpp&quot;">​</a></h1><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">其实学习kruskal重构树更多应该是要学习一些最小生成树的性质：</span></span>
<span class="line"><span style="color:#6A737D;">1.在kruskal算法中，使x,y第一次联通的，就是其对应最小生成树上路径的最大边</span></span>
<span class="line"><span style="color:#6A737D;">2.如果你用按秩合并写的并查集的话，fa数组形成的树恰就是最小生成树（再记一下边权up），而且点x,y路径的最大边恰就在其lca的左边或右边，而且上面的边一定比下面的边更大</span></span>
<span class="line"><span style="color:#6A737D;">3.kruskal重构树则是将边看作虚点，且满足祖先点权大于子孙点权</span></span>
<span class="line"><span style="color:#6A737D;">4.非树边(x,y)一定大于等于x,y在最小生成树上的路径上的每一条边</span></span>
<span class="line"><span style="color:#6A737D;">   等价表述：原图中的任何一个环上的权值最大的边必然有非树边</span></span>
<span class="line"><span style="color:#6A737D;">5.加入一条新边(x,y)，若最小生成树改变，必然是x,y原树路径上的最大边被删去</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">常见应用：</span></span>
<span class="line"><span style="color:#6A737D;">1.在线处理最值最短路：更优，更快，更好写（利用了上述1,2性质），但没建重构树</span></span>
<span class="line"><span style="color:#6A737D;">2.在线处理边权限制可达性：建出重构树后结合倍增找深度最浅的满足权值限制的祖先</span></span>
<span class="line"><span style="color:#6A737D;">3.在线处理点权限制可达性：建点权多叉重构树</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#6A737D;">//以下是应用1的一份实现精细的代码</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Fa[x] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(Fa[x]); }</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uni</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">u</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	u </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(u), v </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(v);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (u </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> v) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Fa[u] </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Fa[v]) </span><span style="color:#B392F0;">swap</span><span style="color:#E1E4E8;">(u, v);</span></span>
<span class="line"><span style="color:#E1E4E8;">	Fa[v] </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> Fa[u], Fa[u] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> v, T[u] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ask</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">u</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (u </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> v) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> T[u] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> T[v] </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> u </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> v;</span></span>
<span class="line"><span style="color:#E1E4E8;">		t </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> T[x], x </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Fa[x];</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (t </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> INF) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> t;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">	Fa.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">n</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">m,</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">	T.</span><span style="color:#B392F0;">assign</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">n</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">m,INF); </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">ABC355F：绝世好题</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">其实学习kruskal重构树更多应该是要学习一些最小生成树的性质：</span></span>
<span class="line"><span style="color:#6A737D;">1.在kruskal算法中，使x,y第一次联通的，就是其对应最小生成树上路径的最大边</span></span>
<span class="line"><span style="color:#6A737D;">2.如果你用按秩合并写的并查集的话，fa数组形成的树恰就是最小生成树（再记一下边权up），而且点x,y路径的最大边恰就在其lca的左边或右边，而且上面的边一定比下面的边更大</span></span>
<span class="line"><span style="color:#6A737D;">3.kruskal重构树则是将边看作虚点，且满足祖先点权大于子孙点权</span></span>
<span class="line"><span style="color:#6A737D;">4.非树边(x,y)一定大于等于x,y在最小生成树上的路径上的每一条边</span></span>
<span class="line"><span style="color:#6A737D;">   等价表述：原图中的任何一个环上的权值最大的边必然有非树边</span></span>
<span class="line"><span style="color:#6A737D;">5.加入一条新边(x,y)，若最小生成树改变，必然是x,y原树路径上的最大边被删去</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">常见应用：</span></span>
<span class="line"><span style="color:#6A737D;">1.在线处理最值最短路：更优，更快，更好写（利用了上述1,2性质），但没建重构树</span></span>
<span class="line"><span style="color:#6A737D;">2.在线处理边权限制可达性：建出重构树后结合倍增找深度最浅的满足权值限制的祖先</span></span>
<span class="line"><span style="color:#6A737D;">3.在线处理点权限制可达性：建点权多叉重构树</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#6A737D;">//以下是应用1的一份实现精细的代码</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) { </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Fa[x] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(Fa[x]); }</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uni</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">u</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">v</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">t</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	u </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(u), v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(v);</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (u </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> v) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Fa[u] </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Fa[v]) </span><span style="color:#6F42C1;">swap</span><span style="color:#24292E;">(u, v);</span></span>
<span class="line"><span style="color:#24292E;">	Fa[v] </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> Fa[u], Fa[u] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> v, T[u] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ask</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">u</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">v</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (u </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> v) {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> T[u] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> T[v] </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> u </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#24292E;">		t </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> T[x], x </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Fa[x];</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (t </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> INF) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> t;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">	Fa.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">n</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">m,</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">	T.</span><span style="color:#6F42C1;">assign</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">n</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">m,INF); </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">ABC355F：绝世好题</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre></div>`,2),e=[o];function t(c,r,y,E,i,F){return n(),a("div",null,e)}const u=s(l,[["render",t]]);export{D as __pageData,u as default};
