import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.e7363dcb.js";const u=JSON.parse('{"title":"c++语法","description":"","frontmatter":{},"headers":[],"relativePath":"Basicknowledge/c++语法.md","filePath":"Basicknowledge/c++语法.md","lastUpdated":1738679397000}'),p={name:"Basicknowledge/c++语法.md"},o=l(`<h1 id="c-语法" tabindex="-1">c++语法 <a class="header-anchor" href="#c-语法" aria-label="Permalink to &quot;c++语法&quot;">​</a></h1><h2 id="template相关" tabindex="-1">template相关： <a class="header-anchor" href="#template相关" aria-label="Permalink to &quot;template相关：&quot;">​</a></h2><h3 id="用法1" tabindex="-1">用法1： <a class="header-anchor" href="#用法1" aria-label="Permalink to &quot;用法1：&quot;">​</a></h3><p>给函数内的变量类型赋值</p><p>例如：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typename</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">ll</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">plus</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">){</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">y;}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">typename</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">ll</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">plus</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">y;}</span></span></code></pre></div><p>那么，函数有两种调用方法：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cout</span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#B392F0;">plus</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ll</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//钦定T是ll</span></span>
<span class="line"><span style="color:#E1E4E8;">cout</span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#B392F0;">plus</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//推导T是int，类似auto</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#6F42C1;">plus</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ll</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//钦定T是ll</span></span>
<span class="line"><span style="color:#24292E;">cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#6F42C1;">plus</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//推导T是int，类似auto</span></span></code></pre></div><h3 id="用法2" tabindex="-1">用法2： <a class="header-anchor" href="#用法2" aria-label="Permalink to &quot;用法2：&quot;">​</a></h3><p>给函数内常量赋值</p><p>例如：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> mod1</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">998244353</span><span style="color:#E1E4E8;">,mod2</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">e</span><span style="color:#79B8FF;">9</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">template</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mod</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">ll</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ksm</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">ll</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">ll</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">	ll res</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(;y;y</span><span style="color:#F97583;">&gt;&gt;=</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(y</span><span style="color:#F97583;">&amp;</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) res</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">res</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">x</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">mod;</span></span>
<span class="line"><span style="color:#E1E4E8;">		x</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">x</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">x</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">mod;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">cout</span><span style="color:#F97583;">&lt;&lt;</span><span style="color:#B392F0;">ksm</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">mod1</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">e</span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> mod1</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">998244353</span><span style="color:#24292E;">,mod2</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">e</span><span style="color:#005CC5;">9</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">template</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mod</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6F42C1;">ll</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ksm</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">ll</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#6F42C1;">ll</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	ll res</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(;y;y</span><span style="color:#D73A49;">&gt;&gt;=</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(y</span><span style="color:#D73A49;">&amp;</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) res</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">res</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">x</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">mod;</span></span>
<span class="line"><span style="color:#24292E;">		x</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">x</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">x</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">mod;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">cout</span><span style="color:#D73A49;">&lt;&lt;</span><span style="color:#6F42C1;">ksm</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">mod1</span><span style="color:#24292E;">&gt;(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">e</span><span style="color:#005CC5;">9</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="lambda相关" tabindex="-1">lambda相关： <a class="header-anchor" href="#lambda相关" aria-label="Permalink to &quot;lambda相关：&quot;">​</a></h2><p>基本语法:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#FFAB70;">capture_list</span><span style="color:#E1E4E8;">](</span><span style="color:#B392F0;">parameters</span><span style="color:#E1E4E8;">) -&gt;</span><span style="color:#F97583;">return_type{function_body}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#E36209;">capture_list</span><span style="color:#24292E;">](</span><span style="color:#6F42C1;">parameters</span><span style="color:#24292E;">) -&gt;</span><span style="color:#D73A49;">return_type{function_body}</span></span></code></pre></div><h3 id="capture-list" tabindex="-1">capture_list: <a class="header-anchor" href="#capture-list" aria-label="Permalink to &quot;capture_list:&quot;">​</a></h3><p>类型：传值，引用</p><p>例如：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">z</span><span style="color:#E1E4E8;">](</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">){</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a;}</span><span style="color:#6A737D;">//传值x,y,引用z</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">&amp;</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">](</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">){</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a;}</span><span style="color:#6A737D;">//传值除了x以外的所有东西，引用x</span></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">](</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">){</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a;}</span><span style="color:#6A737D;">//引用除了x以外的所有东西，传值x</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">z</span><span style="color:#24292E;">](</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a;}</span><span style="color:#6A737D;">//传值x,y,引用z</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">&amp;</span><span style="color:#E36209;">x</span><span style="color:#24292E;">](</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a;}</span><span style="color:#6A737D;">//传值除了x以外的所有东西，引用x</span></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">,</span><span style="color:#E36209;">x</span><span style="color:#24292E;">](</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">a</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a;}</span><span style="color:#6A737D;">//引用除了x以外的所有东西，传值x</span></span></code></pre></div><h3 id="return-type" tabindex="-1">return_type: <a class="header-anchor" href="#return-type" aria-label="Permalink to &quot;return_type:&quot;">​</a></h3><p>可以省略，让编译器自行推导</p><p>也可以钦定</p><p>注意，<code>lambda</code> 可以当做一个参数传递给函数，类型就是 <code>auto</code></p><p>例如：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sort</span><span style="color:#E1E4E8;">(a</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,a</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">n,[](</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">){</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">y;});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sort</span><span style="color:#24292E;">(a</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,a</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">n,[](</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#E36209;">y</span><span style="color:#24292E;">){</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">y;});</span></span></code></pre></div>`,25),e=[o];function t(c,r,y,E,i,F){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
